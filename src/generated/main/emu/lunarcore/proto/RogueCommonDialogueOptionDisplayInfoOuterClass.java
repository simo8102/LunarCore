// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class RogueCommonDialogueOptionDisplayInfoOuterClass {
  /**
   * Protobuf type {@code RogueCommonDialogueOptionDisplayInfo}
   */
  public static final class RogueCommonDialogueOptionDisplayInfo extends ProtoMessage<RogueCommonDialogueOptionDisplayInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float display_float_value = 7;</code>
     */
    private float displayFloatValue;

    /**
     * <code>optional int32 display_int_value = 3;</code>
     */
    private int displayIntValue;

    private RogueCommonDialogueOptionDisplayInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonDialogueOptionDisplayInfo}
     */
    public static RogueCommonDialogueOptionDisplayInfo newInstance() {
      return new RogueCommonDialogueOptionDisplayInfo();
    }

    /**
     * <code>optional float display_float_value = 7;</code>
     * @return whether the displayFloatValue field is set
     */
    public boolean hasDisplayFloatValue() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float display_float_value = 7;</code>
     * @return this
     */
    public RogueCommonDialogueOptionDisplayInfo clearDisplayFloatValue() {
      bitField0_ &= ~0x00000001;
      displayFloatValue = 0F;
      return this;
    }

    /**
     * <code>optional float display_float_value = 7;</code>
     * @return the displayFloatValue
     */
    public float getDisplayFloatValue() {
      return displayFloatValue;
    }

    /**
     * <code>optional float display_float_value = 7;</code>
     * @param value the displayFloatValue to set
     * @return this
     */
    public RogueCommonDialogueOptionDisplayInfo setDisplayFloatValue(final float value) {
      bitField0_ |= 0x00000001;
      displayFloatValue = value;
      return this;
    }

    /**
     * <code>optional int32 display_int_value = 3;</code>
     * @return whether the displayIntValue field is set
     */
    public boolean hasDisplayIntValue() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional int32 display_int_value = 3;</code>
     * @return this
     */
    public RogueCommonDialogueOptionDisplayInfo clearDisplayIntValue() {
      bitField0_ &= ~0x00000002;
      displayIntValue = 0;
      return this;
    }

    /**
     * <code>optional int32 display_int_value = 3;</code>
     * @return the displayIntValue
     */
    public int getDisplayIntValue() {
      return displayIntValue;
    }

    /**
     * <code>optional int32 display_int_value = 3;</code>
     * @param value the displayIntValue to set
     * @return this
     */
    public RogueCommonDialogueOptionDisplayInfo setDisplayIntValue(final int value) {
      bitField0_ |= 0x00000002;
      displayIntValue = value;
      return this;
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo copyFrom(
        final RogueCommonDialogueOptionDisplayInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        displayFloatValue = other.displayFloatValue;
        displayIntValue = other.displayIntValue;
      }
      return this;
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo mergeFrom(
        final RogueCommonDialogueOptionDisplayInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDisplayFloatValue()) {
        setDisplayFloatValue(other.displayFloatValue);
      }
      if (other.hasDisplayIntValue()) {
        setDisplayIntValue(other.displayIntValue);
      }
      return this;
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      displayFloatValue = 0F;
      displayIntValue = 0;
      return this;
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonDialogueOptionDisplayInfo)) {
        return false;
      }
      RogueCommonDialogueOptionDisplayInfo other = (RogueCommonDialogueOptionDisplayInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasDisplayFloatValue() || ProtoUtil.isEqual(displayFloatValue, other.displayFloatValue))
        && (!hasDisplayIntValue() || displayIntValue == other.displayIntValue);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 61);
        output.writeFloatNoTag(displayFloatValue);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeInt32NoTag(displayIntValue);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(displayIntValue);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonDialogueOptionDisplayInfo mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 61: {
            // displayFloatValue
            displayFloatValue = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // displayIntValue
            displayIntValue = input.readInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.displayFloatValue, displayFloatValue);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeInt32(FieldNames.displayIntValue, displayIntValue);
      }
      output.endObject();
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1495597783:
          case -1607645743: {
            if (input.isAtField(FieldNames.displayFloatValue)) {
              if (!input.trySkipNullValue()) {
                displayFloatValue = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -639090268:
          case -626645532: {
            if (input.isAtField(FieldNames.displayIntValue)) {
              if (!input.trySkipNullValue()) {
                displayIntValue = input.readInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonDialogueOptionDisplayInfo clone() {
      return new RogueCommonDialogueOptionDisplayInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonDialogueOptionDisplayInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueOptionDisplayInfo(), data).checkInitialized();
    }

    public static RogueCommonDialogueOptionDisplayInfo parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueOptionDisplayInfo(), input).checkInitialized();
    }

    public static RogueCommonDialogueOptionDisplayInfo parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueOptionDisplayInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonDialogueOptionDisplayInfo messages
     */
    public static MessageFactory<RogueCommonDialogueOptionDisplayInfo> getFactory() {
      return RogueCommonDialogueOptionDisplayInfoFactory.INSTANCE;
    }

    private enum RogueCommonDialogueOptionDisplayInfoFactory implements MessageFactory<RogueCommonDialogueOptionDisplayInfo> {
      INSTANCE;

      @Override
      public RogueCommonDialogueOptionDisplayInfo create() {
        return RogueCommonDialogueOptionDisplayInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName displayFloatValue = FieldName.forField("displayFloatValue", "display_float_value");

      static final FieldName displayIntValue = FieldName.forField("displayIntValue", "display_int_value");
    }
  }
}
