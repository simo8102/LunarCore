// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueCommonDialogueDataInfoOuterClass {
  /**
   * Protobuf type {@code RogueCommonDialogueDataInfo}
   */
  public static final class RogueCommonDialogueDataInfo extends ProtoMessage<RogueCommonDialogueDataInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 event_unique_id = 8;</code>
     */
    private int eventUniqueId;

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     */
    private final RogueCommonDialogueInfoOuterClass.RogueCommonDialogueInfo dialogueInfo = RogueCommonDialogueInfoOuterClass.RogueCommonDialogueInfo.newInstance();

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     */
    private final RepeatedMessage<RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo> optionList = RepeatedMessage.newEmptyInstance(RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo.getFactory());

    private RogueCommonDialogueDataInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonDialogueDataInfo}
     */
    public static RogueCommonDialogueDataInfo newInstance() {
      return new RogueCommonDialogueDataInfo();
    }

    /**
     * <code>optional uint32 event_unique_id = 8;</code>
     * @return whether the eventUniqueId field is set
     */
    public boolean hasEventUniqueId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 event_unique_id = 8;</code>
     * @return this
     */
    public RogueCommonDialogueDataInfo clearEventUniqueId() {
      bitField0_ &= ~0x00000001;
      eventUniqueId = 0;
      return this;
    }

    /**
     * <code>optional uint32 event_unique_id = 8;</code>
     * @return the eventUniqueId
     */
    public int getEventUniqueId() {
      return eventUniqueId;
    }

    /**
     * <code>optional uint32 event_unique_id = 8;</code>
     * @param value the eventUniqueId to set
     * @return this
     */
    public RogueCommonDialogueDataInfo setEventUniqueId(final int value) {
      bitField0_ |= 0x00000001;
      eventUniqueId = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     * @return whether the dialogueInfo field is set
     */
    public boolean hasDialogueInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     * @return this
     */
    public RogueCommonDialogueDataInfo clearDialogueInfo() {
      bitField0_ &= ~0x00000002;
      dialogueInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDialogueInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonDialogueInfoOuterClass.RogueCommonDialogueInfo getDialogueInfo() {
      return dialogueInfo;
    }

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonDialogueInfoOuterClass.RogueCommonDialogueInfo getMutableDialogueInfo() {
      bitField0_ |= 0x00000002;
      return dialogueInfo;
    }

    /**
     * <code>optional .RogueCommonDialogueInfo dialogue_info = 1;</code>
     * @param value the dialogueInfo to set
     * @return this
     */
    public RogueCommonDialogueDataInfo setDialogueInfo(
        final RogueCommonDialogueInfoOuterClass.RogueCommonDialogueInfo value) {
      bitField0_ |= 0x00000002;
      dialogueInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     * @return whether the optionList field is set
     */
    public boolean hasOptionList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     * @return this
     */
    public RogueCommonDialogueDataInfo clearOptionList() {
      bitField0_ &= ~0x00000004;
      optionList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableOptionList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo> getOptionList(
        ) {
      return optionList;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo> getMutableOptionList(
        ) {
      bitField0_ |= 0x00000004;
      return optionList;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     * @param value the optionList to add
     * @return this
     */
    public RogueCommonDialogueDataInfo addOptionList(
        final RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo value) {
      bitField0_ |= 0x00000004;
      optionList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueCommonDialogueOptionInfo option_list = 2;</code>
     * @param values the optionList to add
     * @return this
     */
    public RogueCommonDialogueDataInfo addAllOptionList(
        final RogueCommonDialogueOptionInfoOuterClass.RogueCommonDialogueOptionInfo... values) {
      bitField0_ |= 0x00000004;
      optionList.addAll(values);
      return this;
    }

    @Override
    public RogueCommonDialogueDataInfo copyFrom(final RogueCommonDialogueDataInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        eventUniqueId = other.eventUniqueId;
        dialogueInfo.copyFrom(other.dialogueInfo);
        optionList.copyFrom(other.optionList);
      }
      return this;
    }

    @Override
    public RogueCommonDialogueDataInfo mergeFrom(final RogueCommonDialogueDataInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEventUniqueId()) {
        setEventUniqueId(other.eventUniqueId);
      }
      if (other.hasDialogueInfo()) {
        getMutableDialogueInfo().mergeFrom(other.dialogueInfo);
      }
      if (other.hasOptionList()) {
        getMutableOptionList().addAll(other.optionList);
      }
      return this;
    }

    @Override
    public RogueCommonDialogueDataInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      eventUniqueId = 0;
      dialogueInfo.clear();
      optionList.clear();
      return this;
    }

    @Override
    public RogueCommonDialogueDataInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dialogueInfo.clearQuick();
      optionList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonDialogueDataInfo)) {
        return false;
      }
      RogueCommonDialogueDataInfo other = (RogueCommonDialogueDataInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasEventUniqueId() || eventUniqueId == other.eventUniqueId)
        && (!hasDialogueInfo() || dialogueInfo.equals(other.dialogueInfo))
        && (!hasOptionList() || optionList.equals(other.optionList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(eventUniqueId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(dialogueInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < optionList.length(); i++) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(optionList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(eventUniqueId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(dialogueInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * optionList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(optionList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonDialogueDataInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // eventUniqueId
            eventUniqueId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // dialogueInfo
            input.readMessage(dialogueInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // optionList
            tag = input.readRepeatedMessage(optionList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.eventUniqueId, eventUniqueId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.dialogueInfo, dialogueInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.optionList, optionList);
      }
      output.endObject();
    }

    @Override
    public RogueCommonDialogueDataInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2091680134:
          case -157385500: {
            if (input.isAtField(FieldNames.eventUniqueId)) {
              if (!input.trySkipNullValue()) {
                eventUniqueId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1350698662:
          case -1057838411: {
            if (input.isAtField(FieldNames.dialogueInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(dialogueInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1373334195:
          case -358686168: {
            if (input.isAtField(FieldNames.optionList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(optionList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonDialogueDataInfo clone() {
      return new RogueCommonDialogueDataInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonDialogueDataInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueDataInfo(), data).checkInitialized();
    }

    public static RogueCommonDialogueDataInfo parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueDataInfo(), input).checkInitialized();
    }

    public static RogueCommonDialogueDataInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonDialogueDataInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonDialogueDataInfo messages
     */
    public static MessageFactory<RogueCommonDialogueDataInfo> getFactory() {
      return RogueCommonDialogueDataInfoFactory.INSTANCE;
    }

    private enum RogueCommonDialogueDataInfoFactory implements MessageFactory<RogueCommonDialogueDataInfo> {
      INSTANCE;

      @Override
      public RogueCommonDialogueDataInfo create() {
        return RogueCommonDialogueDataInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName eventUniqueId = FieldName.forField("eventUniqueId", "event_unique_id");

      static final FieldName dialogueInfo = FieldName.forField("dialogueInfo", "dialogue_info");

      static final FieldName optionList = FieldName.forField("optionList", "option_list");
    }
  }
}
