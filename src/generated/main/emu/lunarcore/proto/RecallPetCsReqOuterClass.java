// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RecallPetCsReqOuterClass {
  /**
   * Protobuf type {@code RecallPetCsReq}
   */
  public static final class RecallPetCsReq extends ProtoMessage<RecallPetCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 summoned_pet_id = 8;</code>
     */
    private int summonedPetId;

    private RecallPetCsReq() {
    }

    /**
     * @return a new empty instance of {@code RecallPetCsReq}
     */
    public static RecallPetCsReq newInstance() {
      return new RecallPetCsReq();
    }

    /**
     * <code>optional uint32 summoned_pet_id = 8;</code>
     * @return whether the summonedPetId field is set
     */
    public boolean hasSummonedPetId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 summoned_pet_id = 8;</code>
     * @return this
     */
    public RecallPetCsReq clearSummonedPetId() {
      bitField0_ &= ~0x00000001;
      summonedPetId = 0;
      return this;
    }

    /**
     * <code>optional uint32 summoned_pet_id = 8;</code>
     * @return the summonedPetId
     */
    public int getSummonedPetId() {
      return summonedPetId;
    }

    /**
     * <code>optional uint32 summoned_pet_id = 8;</code>
     * @param value the summonedPetId to set
     * @return this
     */
    public RecallPetCsReq setSummonedPetId(final int value) {
      bitField0_ |= 0x00000001;
      summonedPetId = value;
      return this;
    }

    @Override
    public RecallPetCsReq copyFrom(final RecallPetCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        summonedPetId = other.summonedPetId;
      }
      return this;
    }

    @Override
    public RecallPetCsReq mergeFrom(final RecallPetCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSummonedPetId()) {
        setSummonedPetId(other.summonedPetId);
      }
      return this;
    }

    @Override
    public RecallPetCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      summonedPetId = 0;
      return this;
    }

    @Override
    public RecallPetCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RecallPetCsReq)) {
        return false;
      }
      RecallPetCsReq other = (RecallPetCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasSummonedPetId() || summonedPetId == other.summonedPetId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(summonedPetId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(summonedPetId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RecallPetCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // summonedPetId
            summonedPetId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.summonedPetId, summonedPetId);
      }
      output.endObject();
    }

    @Override
    public RecallPetCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1942999750:
          case 1818014746: {
            if (input.isAtField(FieldNames.summonedPetId)) {
              if (!input.trySkipNullValue()) {
                summonedPetId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RecallPetCsReq clone() {
      return new RecallPetCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RecallPetCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RecallPetCsReq(), data).checkInitialized();
    }

    public static RecallPetCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RecallPetCsReq(), input).checkInitialized();
    }

    public static RecallPetCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RecallPetCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating RecallPetCsReq messages
     */
    public static MessageFactory<RecallPetCsReq> getFactory() {
      return RecallPetCsReqFactory.INSTANCE;
    }

    private enum RecallPetCsReqFactory implements MessageFactory<RecallPetCsReq> {
      INSTANCE;

      @Override
      public RecallPetCsReq create() {
        return RecallPetCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName summonedPetId = FieldName.forField("summonedPetId", "summoned_pet_id");
    }
  }
}
