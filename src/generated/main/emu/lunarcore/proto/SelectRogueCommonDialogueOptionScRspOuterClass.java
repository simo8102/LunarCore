// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class SelectRogueCommonDialogueOptionScRspOuterClass {
  /**
   * Protobuf type {@code SelectRogueCommonDialogueOptionScRsp}
   */
  public static final class SelectRogueCommonDialogueOptionScRsp extends ProtoMessage<SelectRogueCommonDialogueOptionScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 option_id = 2;</code>
     */
    private int optionId;

    /**
     * <code>optional uint32 retcode = 8;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 event_unique_id = 9;</code>
     */
    private int eventUniqueId;

    /**
     * <code>optional bool event_has_effect = 6;</code>
     */
    private boolean eventHasEffect;

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     */
    private final RogueCommonDialogueDataInfoOuterClass.RogueCommonDialogueDataInfo dialogueData = RogueCommonDialogueDataInfoOuterClass.RogueCommonDialogueDataInfo.newInstance();

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     */
    private final RepeatedInt effectEventIdList = RepeatedInt.newEmptyInstance();

    private SelectRogueCommonDialogueOptionScRsp() {
    }

    /**
     * @return a new empty instance of {@code SelectRogueCommonDialogueOptionScRsp}
     */
    public static SelectRogueCommonDialogueOptionScRsp newInstance() {
      return new SelectRogueCommonDialogueOptionScRsp();
    }

    /**
     * <code>optional uint32 option_id = 2;</code>
     * @return whether the optionId field is set
     */
    public boolean hasOptionId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 option_id = 2;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearOptionId() {
      bitField0_ &= ~0x00000001;
      optionId = 0;
      return this;
    }

    /**
     * <code>optional uint32 option_id = 2;</code>
     * @return the optionId
     */
    public int getOptionId() {
      return optionId;
    }

    /**
     * <code>optional uint32 option_id = 2;</code>
     * @param value the optionId to set
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp setOptionId(final int value) {
      bitField0_ |= 0x00000001;
      optionId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 8;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 8;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 8;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 8;</code>
     * @param value the retcode to set
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 event_unique_id = 9;</code>
     * @return whether the eventUniqueId field is set
     */
    public boolean hasEventUniqueId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 event_unique_id = 9;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearEventUniqueId() {
      bitField0_ &= ~0x00000004;
      eventUniqueId = 0;
      return this;
    }

    /**
     * <code>optional uint32 event_unique_id = 9;</code>
     * @return the eventUniqueId
     */
    public int getEventUniqueId() {
      return eventUniqueId;
    }

    /**
     * <code>optional uint32 event_unique_id = 9;</code>
     * @param value the eventUniqueId to set
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp setEventUniqueId(final int value) {
      bitField0_ |= 0x00000004;
      eventUniqueId = value;
      return this;
    }

    /**
     * <code>optional bool event_has_effect = 6;</code>
     * @return whether the eventHasEffect field is set
     */
    public boolean hasEventHasEffect() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool event_has_effect = 6;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearEventHasEffect() {
      bitField0_ &= ~0x00000008;
      eventHasEffect = false;
      return this;
    }

    /**
     * <code>optional bool event_has_effect = 6;</code>
     * @return the eventHasEffect
     */
    public boolean getEventHasEffect() {
      return eventHasEffect;
    }

    /**
     * <code>optional bool event_has_effect = 6;</code>
     * @param value the eventHasEffect to set
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp setEventHasEffect(final boolean value) {
      bitField0_ |= 0x00000008;
      eventHasEffect = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     * @return whether the dialogueData field is set
     */
    public boolean hasDialogueData() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearDialogueData() {
      bitField0_ &= ~0x00000010;
      dialogueData.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDialogueData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonDialogueDataInfoOuterClass.RogueCommonDialogueDataInfo getDialogueData() {
      return dialogueData;
    }

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonDialogueDataInfoOuterClass.RogueCommonDialogueDataInfo getMutableDialogueData(
        ) {
      bitField0_ |= 0x00000010;
      return dialogueData;
    }

    /**
     * <code>optional .RogueCommonDialogueDataInfo dialogue_data = 10;</code>
     * @param value the dialogueData to set
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp setDialogueData(
        final RogueCommonDialogueDataInfoOuterClass.RogueCommonDialogueDataInfo value) {
      bitField0_ |= 0x00000010;
      dialogueData.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     * @return whether the effectEventIdList field is set
     */
    public boolean hasEffectEventIdList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp clearEffectEventIdList() {
      bitField0_ &= ~0x00000020;
      effectEventIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEffectEventIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEffectEventIdList() {
      return effectEventIdList;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEffectEventIdList() {
      bitField0_ |= 0x00000020;
      return effectEventIdList;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     * @param value the effectEventIdList to add
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp addEffectEventIdList(final int value) {
      bitField0_ |= 0x00000020;
      effectEventIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 effect_event_id_list = 3;</code>
     * @param values the effectEventIdList to add
     * @return this
     */
    public SelectRogueCommonDialogueOptionScRsp addAllEffectEventIdList(final int... values) {
      bitField0_ |= 0x00000020;
      effectEventIdList.addAll(values);
      return this;
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp copyFrom(
        final SelectRogueCommonDialogueOptionScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        optionId = other.optionId;
        retcode = other.retcode;
        eventUniqueId = other.eventUniqueId;
        eventHasEffect = other.eventHasEffect;
        dialogueData.copyFrom(other.dialogueData);
        effectEventIdList.copyFrom(other.effectEventIdList);
      }
      return this;
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp mergeFrom(
        final SelectRogueCommonDialogueOptionScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasOptionId()) {
        setOptionId(other.optionId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasEventUniqueId()) {
        setEventUniqueId(other.eventUniqueId);
      }
      if (other.hasEventHasEffect()) {
        setEventHasEffect(other.eventHasEffect);
      }
      if (other.hasDialogueData()) {
        getMutableDialogueData().mergeFrom(other.dialogueData);
      }
      if (other.hasEffectEventIdList()) {
        getMutableEffectEventIdList().addAll(other.effectEventIdList);
      }
      return this;
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      optionId = 0;
      retcode = 0;
      eventUniqueId = 0;
      eventHasEffect = false;
      dialogueData.clear();
      effectEventIdList.clear();
      return this;
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dialogueData.clearQuick();
      effectEventIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SelectRogueCommonDialogueOptionScRsp)) {
        return false;
      }
      SelectRogueCommonDialogueOptionScRsp other = (SelectRogueCommonDialogueOptionScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasOptionId() || optionId == other.optionId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasEventUniqueId() || eventUniqueId == other.eventUniqueId)
        && (!hasEventHasEffect() || eventHasEffect == other.eventHasEffect)
        && (!hasDialogueData() || dialogueData.equals(other.dialogueData))
        && (!hasEffectEventIdList() || effectEventIdList.equals(other.effectEventIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(optionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(eventUniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(eventHasEffect);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(dialogueData);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < effectEventIdList.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(effectEventIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(optionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(eventUniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(dialogueData);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * effectEventIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(effectEventIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SelectRogueCommonDialogueOptionScRsp mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // optionId
            optionId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // eventUniqueId
            eventUniqueId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // eventHasEffect
            eventHasEffect = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // dialogueData
            input.readMessage(dialogueData);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // effectEventIdList [packed=true]
            input.readPackedUInt32(effectEventIdList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // effectEventIdList [packed=false]
            tag = input.readRepeatedUInt32(effectEventIdList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.optionId, optionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.eventUniqueId, eventUniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.eventHasEffect, eventHasEffect);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.dialogueData, dialogueData);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.effectEventIdList, effectEventIdList);
      }
      output.endObject();
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -79017872:
          case 1845434661: {
            if (input.isAtField(FieldNames.optionId)) {
              if (!input.trySkipNullValue()) {
                optionId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2091680134:
          case -157385500: {
            if (input.isAtField(FieldNames.eventUniqueId)) {
              if (!input.trySkipNullValue()) {
                eventUniqueId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 269571921:
          case 693895579: {
            if (input.isAtField(FieldNames.eventHasEffect)) {
              if (!input.trySkipNullValue()) {
                eventHasEffect = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1350537634:
          case -1057999439: {
            if (input.isAtField(FieldNames.dialogueData)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(dialogueData);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1375491774:
          case -1217188241: {
            if (input.isAtField(FieldNames.effectEventIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(effectEventIdList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SelectRogueCommonDialogueOptionScRsp clone() {
      return new SelectRogueCommonDialogueOptionScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SelectRogueCommonDialogueOptionScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SelectRogueCommonDialogueOptionScRsp(), data).checkInitialized();
    }

    public static SelectRogueCommonDialogueOptionScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new SelectRogueCommonDialogueOptionScRsp(), input).checkInitialized();
    }

    public static SelectRogueCommonDialogueOptionScRsp parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new SelectRogueCommonDialogueOptionScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating SelectRogueCommonDialogueOptionScRsp messages
     */
    public static MessageFactory<SelectRogueCommonDialogueOptionScRsp> getFactory() {
      return SelectRogueCommonDialogueOptionScRspFactory.INSTANCE;
    }

    private enum SelectRogueCommonDialogueOptionScRspFactory implements MessageFactory<SelectRogueCommonDialogueOptionScRsp> {
      INSTANCE;

      @Override
      public SelectRogueCommonDialogueOptionScRsp create() {
        return SelectRogueCommonDialogueOptionScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName optionId = FieldName.forField("optionId", "option_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName eventUniqueId = FieldName.forField("eventUniqueId", "event_unique_id");

      static final FieldName eventHasEffect = FieldName.forField("eventHasEffect", "event_has_effect");

      static final FieldName dialogueData = FieldName.forField("dialogueData", "dialogue_data");

      static final FieldName effectEventIdList = FieldName.forField("effectEventIdList", "effect_event_id_list");
    }
  }
}
