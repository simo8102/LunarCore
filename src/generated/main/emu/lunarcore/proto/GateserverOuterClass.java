// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class GateserverOuterClass {
  /**
   * Protobuf type {@code Gateserver}
   */
  public static final class Gateserver extends ProtoMessage<Gateserver> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 port = 2;</code>
     */
    private int port;

    /**
     * <code>optional bool enable_version_update = 1;</code>
     */
    private boolean enableVersionUpdate;

    /**
     * <code>optional bool enable_design_data_bundle_version_update = 7;</code>
     */
    private boolean enableDesignDataBundleVersionUpdate;

    /**
     * <code>optional bool event_tracking_open = 414;</code>
     */
    private boolean eventTrackingOpen;

    /**
     * <code>optional bool enable_android_middle_package = 593;</code>
     */
    private boolean enableAndroidMiddlePackage;

    /**
     * <pre>
     *  for beta, useless on release </pre>
     *
     * <code>optional bool enable_watermark = 1457;</code>
     */
    private boolean enableWatermark;

    /**
     * <code>optional bool close_redeem_code = 1486;</code>
     */
    private boolean closeRedeemCode;

    /**
     * <code>optional bool network_diagnostic = 1566;</code>
     */
    private boolean networkDiagnostic;

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     */
    private final Utf8String assetBundleUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ip = 4;</code>
     */
    private final Utf8String ip = Utf8String.newEmptyInstance();

    /**
     * <code>optional string region_name = 5;</code>
     */
    private final Utf8String regionName = Utf8String.newEmptyInstance();

    /**
     * <code>optional string lua_url = 10;</code>
     */
    private final Utf8String luaUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ex_resource_url = 14;</code>
     */
    private final Utf8String exResourceUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string mdk_res_version = 661;</code>
     */
    private final Utf8String mdkResVersion = Utf8String.newEmptyInstance();

    /**
     * <code>optional string ifix_url = 1113;</code>
     */
    private final Utf8String ifixUrl = Utf8String.newEmptyInstance();

    /**
     * <code>optional string msg = 1192;</code>
     */
    private final Utf8String msg = Utf8String.newEmptyInstance();

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     */
    private final Utf8String ifixVersion = Utf8String.newEmptyInstance();

    /**
     * <code>optional string client_secret_key = 1808;</code>
     */
    private final Utf8String clientSecretKey = Utf8String.newEmptyInstance();

    private Gateserver() {
    }

    /**
     * @return a new empty instance of {@code Gateserver}
     */
    public static Gateserver newInstance() {
      return new Gateserver();
    }

    /**
     * <code>optional uint32 port = 2;</code>
     * @return whether the port field is set
     */
    public boolean hasPort() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 port = 2;</code>
     * @return this
     */
    public Gateserver clearPort() {
      bitField0_ &= ~0x00000001;
      port = 0;
      return this;
    }

    /**
     * <code>optional uint32 port = 2;</code>
     * @return the port
     */
    public int getPort() {
      return port;
    }

    /**
     * <code>optional uint32 port = 2;</code>
     * @param value the port to set
     * @return this
     */
    public Gateserver setPort(final int value) {
      bitField0_ |= 0x00000001;
      port = value;
      return this;
    }

    /**
     * <code>optional bool enable_version_update = 1;</code>
     * @return whether the enableVersionUpdate field is set
     */
    public boolean hasEnableVersionUpdate() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool enable_version_update = 1;</code>
     * @return this
     */
    public Gateserver clearEnableVersionUpdate() {
      bitField0_ &= ~0x00000002;
      enableVersionUpdate = false;
      return this;
    }

    /**
     * <code>optional bool enable_version_update = 1;</code>
     * @return the enableVersionUpdate
     */
    public boolean getEnableVersionUpdate() {
      return enableVersionUpdate;
    }

    /**
     * <code>optional bool enable_version_update = 1;</code>
     * @param value the enableVersionUpdate to set
     * @return this
     */
    public Gateserver setEnableVersionUpdate(final boolean value) {
      bitField0_ |= 0x00000002;
      enableVersionUpdate = value;
      return this;
    }

    /**
     * <code>optional bool enable_design_data_bundle_version_update = 7;</code>
     * @return whether the enableDesignDataBundleVersionUpdate field is set
     */
    public boolean hasEnableDesignDataBundleVersionUpdate() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool enable_design_data_bundle_version_update = 7;</code>
     * @return this
     */
    public Gateserver clearEnableDesignDataBundleVersionUpdate() {
      bitField0_ &= ~0x00000004;
      enableDesignDataBundleVersionUpdate = false;
      return this;
    }

    /**
     * <code>optional bool enable_design_data_bundle_version_update = 7;</code>
     * @return the enableDesignDataBundleVersionUpdate
     */
    public boolean getEnableDesignDataBundleVersionUpdate() {
      return enableDesignDataBundleVersionUpdate;
    }

    /**
     * <code>optional bool enable_design_data_bundle_version_update = 7;</code>
     * @param value the enableDesignDataBundleVersionUpdate to set
     * @return this
     */
    public Gateserver setEnableDesignDataBundleVersionUpdate(final boolean value) {
      bitField0_ |= 0x00000004;
      enableDesignDataBundleVersionUpdate = value;
      return this;
    }

    /**
     * <code>optional bool event_tracking_open = 414;</code>
     * @return whether the eventTrackingOpen field is set
     */
    public boolean hasEventTrackingOpen() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool event_tracking_open = 414;</code>
     * @return this
     */
    public Gateserver clearEventTrackingOpen() {
      bitField0_ &= ~0x00000008;
      eventTrackingOpen = false;
      return this;
    }

    /**
     * <code>optional bool event_tracking_open = 414;</code>
     * @return the eventTrackingOpen
     */
    public boolean getEventTrackingOpen() {
      return eventTrackingOpen;
    }

    /**
     * <code>optional bool event_tracking_open = 414;</code>
     * @param value the eventTrackingOpen to set
     * @return this
     */
    public Gateserver setEventTrackingOpen(final boolean value) {
      bitField0_ |= 0x00000008;
      eventTrackingOpen = value;
      return this;
    }

    /**
     * <code>optional bool enable_android_middle_package = 593;</code>
     * @return whether the enableAndroidMiddlePackage field is set
     */
    public boolean hasEnableAndroidMiddlePackage() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional bool enable_android_middle_package = 593;</code>
     * @return this
     */
    public Gateserver clearEnableAndroidMiddlePackage() {
      bitField0_ &= ~0x00000010;
      enableAndroidMiddlePackage = false;
      return this;
    }

    /**
     * <code>optional bool enable_android_middle_package = 593;</code>
     * @return the enableAndroidMiddlePackage
     */
    public boolean getEnableAndroidMiddlePackage() {
      return enableAndroidMiddlePackage;
    }

    /**
     * <code>optional bool enable_android_middle_package = 593;</code>
     * @param value the enableAndroidMiddlePackage to set
     * @return this
     */
    public Gateserver setEnableAndroidMiddlePackage(final boolean value) {
      bitField0_ |= 0x00000010;
      enableAndroidMiddlePackage = value;
      return this;
    }

    /**
     * <pre>
     *  for beta, useless on release </pre>
     *
     * <code>optional bool enable_watermark = 1457;</code>
     * @return whether the enableWatermark field is set
     */
    public boolean hasEnableWatermark() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     *  for beta, useless on release </pre>
     *
     * <code>optional bool enable_watermark = 1457;</code>
     * @return this
     */
    public Gateserver clearEnableWatermark() {
      bitField0_ &= ~0x00000020;
      enableWatermark = false;
      return this;
    }

    /**
     * <pre>
     *  for beta, useless on release </pre>
     *
     * <code>optional bool enable_watermark = 1457;</code>
     * @return the enableWatermark
     */
    public boolean getEnableWatermark() {
      return enableWatermark;
    }

    /**
     * <pre>
     *  for beta, useless on release </pre>
     *
     * <code>optional bool enable_watermark = 1457;</code>
     * @param value the enableWatermark to set
     * @return this
     */
    public Gateserver setEnableWatermark(final boolean value) {
      bitField0_ |= 0x00000020;
      enableWatermark = value;
      return this;
    }

    /**
     * <code>optional bool close_redeem_code = 1486;</code>
     * @return whether the closeRedeemCode field is set
     */
    public boolean hasCloseRedeemCode() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional bool close_redeem_code = 1486;</code>
     * @return this
     */
    public Gateserver clearCloseRedeemCode() {
      bitField0_ &= ~0x00000040;
      closeRedeemCode = false;
      return this;
    }

    /**
     * <code>optional bool close_redeem_code = 1486;</code>
     * @return the closeRedeemCode
     */
    public boolean getCloseRedeemCode() {
      return closeRedeemCode;
    }

    /**
     * <code>optional bool close_redeem_code = 1486;</code>
     * @param value the closeRedeemCode to set
     * @return this
     */
    public Gateserver setCloseRedeemCode(final boolean value) {
      bitField0_ |= 0x00000040;
      closeRedeemCode = value;
      return this;
    }

    /**
     * <code>optional bool network_diagnostic = 1566;</code>
     * @return whether the networkDiagnostic field is set
     */
    public boolean hasNetworkDiagnostic() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool network_diagnostic = 1566;</code>
     * @return this
     */
    public Gateserver clearNetworkDiagnostic() {
      bitField0_ &= ~0x00000080;
      networkDiagnostic = false;
      return this;
    }

    /**
     * <code>optional bool network_diagnostic = 1566;</code>
     * @return the networkDiagnostic
     */
    public boolean getNetworkDiagnostic() {
      return networkDiagnostic;
    }

    /**
     * <code>optional bool network_diagnostic = 1566;</code>
     * @param value the networkDiagnostic to set
     * @return this
     */
    public Gateserver setNetworkDiagnostic(final boolean value) {
      bitField0_ |= 0x00000080;
      networkDiagnostic = value;
      return this;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @return whether the assetBundleUrl field is set
     */
    public boolean hasAssetBundleUrl() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @return this
     */
    public Gateserver clearAssetBundleUrl() {
      bitField0_ &= ~0x00000100;
      assetBundleUrl.clear();
      return this;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @return the assetBundleUrl
     */
    public String getAssetBundleUrl() {
      return assetBundleUrl.getString();
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for reading
     */
    public Utf8String getAssetBundleUrlBytes() {
      return this.assetBundleUrl;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @return internal {@code Utf8String} representation of assetBundleUrl for modifications
     */
    public Utf8String getMutableAssetBundleUrlBytes() {
      bitField0_ |= 0x00000100;
      return this.assetBundleUrl;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final CharSequence value) {
      bitField0_ |= 0x00000100;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string asset_bundle_url = 3;</code>
     * @param value the assetBundleUrl to set
     * @return this
     */
    public Gateserver setAssetBundleUrl(final Utf8String value) {
      bitField0_ |= 0x00000100;
      assetBundleUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @return whether the ip field is set
     */
    public boolean hasIp() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @return this
     */
    public Gateserver clearIp() {
      bitField0_ &= ~0x00000200;
      ip.clear();
      return this;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @return the ip
     */
    public String getIp() {
      return ip.getString();
    }

    /**
     * <code>optional string ip = 4;</code>
     * @return internal {@code Utf8String} representation of ip for reading
     */
    public Utf8String getIpBytes() {
      return this.ip;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @return internal {@code Utf8String} representation of ip for modifications
     */
    public Utf8String getMutableIpBytes() {
      bitField0_ |= 0x00000200;
      return this.ip;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final CharSequence value) {
      bitField0_ |= 0x00000200;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ip = 4;</code>
     * @param value the ip to set
     * @return this
     */
    public Gateserver setIp(final Utf8String value) {
      bitField0_ |= 0x00000200;
      ip.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @return whether the regionName field is set
     */
    public boolean hasRegionName() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @return this
     */
    public Gateserver clearRegionName() {
      bitField0_ &= ~0x00000400;
      regionName.clear();
      return this;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @return the regionName
     */
    public String getRegionName() {
      return regionName.getString();
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @return internal {@code Utf8String} representation of regionName for reading
     */
    public Utf8String getRegionNameBytes() {
      return this.regionName;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @return internal {@code Utf8String} representation of regionName for modifications
     */
    public Utf8String getMutableRegionNameBytes() {
      bitField0_ |= 0x00000400;
      return this.regionName;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final CharSequence value) {
      bitField0_ |= 0x00000400;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string region_name = 5;</code>
     * @param value the regionName to set
     * @return this
     */
    public Gateserver setRegionName(final Utf8String value) {
      bitField0_ |= 0x00000400;
      regionName.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @return whether the luaUrl field is set
     */
    public boolean hasLuaUrl() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @return this
     */
    public Gateserver clearLuaUrl() {
      bitField0_ &= ~0x00000800;
      luaUrl.clear();
      return this;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @return the luaUrl
     */
    public String getLuaUrl() {
      return luaUrl.getString();
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @return internal {@code Utf8String} representation of luaUrl for reading
     */
    public Utf8String getLuaUrlBytes() {
      return this.luaUrl;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @return internal {@code Utf8String} representation of luaUrl for modifications
     */
    public Utf8String getMutableLuaUrlBytes() {
      bitField0_ |= 0x00000800;
      return this.luaUrl;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final CharSequence value) {
      bitField0_ |= 0x00000800;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string lua_url = 10;</code>
     * @param value the luaUrl to set
     * @return this
     */
    public Gateserver setLuaUrl(final Utf8String value) {
      bitField0_ |= 0x00000800;
      luaUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @return whether the exResourceUrl field is set
     */
    public boolean hasExResourceUrl() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @return this
     */
    public Gateserver clearExResourceUrl() {
      bitField0_ &= ~0x00001000;
      exResourceUrl.clear();
      return this;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @return the exResourceUrl
     */
    public String getExResourceUrl() {
      return exResourceUrl.getString();
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for reading
     */
    public Utf8String getExResourceUrlBytes() {
      return this.exResourceUrl;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @return internal {@code Utf8String} representation of exResourceUrl for modifications
     */
    public Utf8String getMutableExResourceUrlBytes() {
      bitField0_ |= 0x00001000;
      return this.exResourceUrl;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final CharSequence value) {
      bitField0_ |= 0x00001000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ex_resource_url = 14;</code>
     * @param value the exResourceUrl to set
     * @return this
     */
    public Gateserver setExResourceUrl(final Utf8String value) {
      bitField0_ |= 0x00001000;
      exResourceUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @return whether the mdkResVersion field is set
     */
    public boolean hasMdkResVersion() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @return this
     */
    public Gateserver clearMdkResVersion() {
      bitField0_ &= ~0x00002000;
      mdkResVersion.clear();
      return this;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @return the mdkResVersion
     */
    public String getMdkResVersion() {
      return mdkResVersion.getString();
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @return internal {@code Utf8String} representation of mdkResVersion for reading
     */
    public Utf8String getMdkResVersionBytes() {
      return this.mdkResVersion;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @return internal {@code Utf8String} representation of mdkResVersion for modifications
     */
    public Utf8String getMutableMdkResVersionBytes() {
      bitField0_ |= 0x00002000;
      return this.mdkResVersion;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @param value the mdkResVersion to set
     * @return this
     */
    public Gateserver setMdkResVersion(final CharSequence value) {
      bitField0_ |= 0x00002000;
      mdkResVersion.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string mdk_res_version = 661;</code>
     * @param value the mdkResVersion to set
     * @return this
     */
    public Gateserver setMdkResVersion(final Utf8String value) {
      bitField0_ |= 0x00002000;
      mdkResVersion.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @return whether the ifixUrl field is set
     */
    public boolean hasIfixUrl() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @return this
     */
    public Gateserver clearIfixUrl() {
      bitField0_ &= ~0x00004000;
      ifixUrl.clear();
      return this;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @return the ifixUrl
     */
    public String getIfixUrl() {
      return ifixUrl.getString();
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for reading
     */
    public Utf8String getIfixUrlBytes() {
      return this.ifixUrl;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @return internal {@code Utf8String} representation of ifixUrl for modifications
     */
    public Utf8String getMutableIfixUrlBytes() {
      bitField0_ |= 0x00004000;
      return this.ifixUrl;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final CharSequence value) {
      bitField0_ |= 0x00004000;
      ifixUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string ifix_url = 1113;</code>
     * @param value the ifixUrl to set
     * @return this
     */
    public Gateserver setIfixUrl(final Utf8String value) {
      bitField0_ |= 0x00004000;
      ifixUrl.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @return whether the msg field is set
     */
    public boolean hasMsg() {
      return (bitField0_ & 0x00008000) != 0;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @return this
     */
    public Gateserver clearMsg() {
      bitField0_ &= ~0x00008000;
      msg.clear();
      return this;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @return the msg
     */
    public String getMsg() {
      return msg.getString();
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @return internal {@code Utf8String} representation of msg for reading
     */
    public Utf8String getMsgBytes() {
      return this.msg;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @return internal {@code Utf8String} representation of msg for modifications
     */
    public Utf8String getMutableMsgBytes() {
      bitField0_ |= 0x00008000;
      return this.msg;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final CharSequence value) {
      bitField0_ |= 0x00008000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg = 1192;</code>
     * @param value the msg to set
     * @return this
     */
    public Gateserver setMsg(final Utf8String value) {
      bitField0_ |= 0x00008000;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @return whether the ifixVersion field is set
     */
    public boolean hasIfixVersion() {
      return (bitField0_ & 0x00010000) != 0;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @return this
     */
    public Gateserver clearIfixVersion() {
      bitField0_ &= ~0x00010000;
      ifixVersion.clear();
      return this;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @return the ifixVersion
     */
    public String getIfixVersion() {
      return ifixVersion.getString();
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @return internal {@code Utf8String} representation of ifixVersion for reading
     */
    public Utf8String getIfixVersionBytes() {
      return this.ifixVersion;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @return internal {@code Utf8String} representation of ifixVersion for modifications
     */
    public Utf8String getMutableIfixVersionBytes() {
      bitField0_ |= 0x00010000;
      return this.ifixVersion;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @param value the ifixVersion to set
     * @return this
     */
    public Gateserver setIfixVersion(final CharSequence value) {
      bitField0_ |= 0x00010000;
      ifixVersion.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  guessed
     * </pre>
     *
     * <code>optional string ifix_version = 1430;</code>
     * @param value the ifixVersion to set
     * @return this
     */
    public Gateserver setIfixVersion(final Utf8String value) {
      bitField0_ |= 0x00010000;
      ifixVersion.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @return whether the clientSecretKey field is set
     */
    public boolean hasClientSecretKey() {
      return (bitField0_ & 0x00020000) != 0;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @return this
     */
    public Gateserver clearClientSecretKey() {
      bitField0_ &= ~0x00020000;
      clientSecretKey.clear();
      return this;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @return the clientSecretKey
     */
    public String getClientSecretKey() {
      return clientSecretKey.getString();
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @return internal {@code Utf8String} representation of clientSecretKey for reading
     */
    public Utf8String getClientSecretKeyBytes() {
      return this.clientSecretKey;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @return internal {@code Utf8String} representation of clientSecretKey for modifications
     */
    public Utf8String getMutableClientSecretKeyBytes() {
      bitField0_ |= 0x00020000;
      return this.clientSecretKey;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @param value the clientSecretKey to set
     * @return this
     */
    public Gateserver setClientSecretKey(final CharSequence value) {
      bitField0_ |= 0x00020000;
      clientSecretKey.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string client_secret_key = 1808;</code>
     * @param value the clientSecretKey to set
     * @return this
     */
    public Gateserver setClientSecretKey(final Utf8String value) {
      bitField0_ |= 0x00020000;
      clientSecretKey.copyFrom(value);
      return this;
    }

    @Override
    public Gateserver copyFrom(final Gateserver other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        port = other.port;
        enableVersionUpdate = other.enableVersionUpdate;
        enableDesignDataBundleVersionUpdate = other.enableDesignDataBundleVersionUpdate;
        eventTrackingOpen = other.eventTrackingOpen;
        enableAndroidMiddlePackage = other.enableAndroidMiddlePackage;
        enableWatermark = other.enableWatermark;
        closeRedeemCode = other.closeRedeemCode;
        networkDiagnostic = other.networkDiagnostic;
        assetBundleUrl.copyFrom(other.assetBundleUrl);
        ip.copyFrom(other.ip);
        regionName.copyFrom(other.regionName);
        luaUrl.copyFrom(other.luaUrl);
        exResourceUrl.copyFrom(other.exResourceUrl);
        mdkResVersion.copyFrom(other.mdkResVersion);
        ifixUrl.copyFrom(other.ifixUrl);
        msg.copyFrom(other.msg);
        ifixVersion.copyFrom(other.ifixVersion);
        clientSecretKey.copyFrom(other.clientSecretKey);
      }
      return this;
    }

    @Override
    public Gateserver mergeFrom(final Gateserver other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasPort()) {
        setPort(other.port);
      }
      if (other.hasEnableVersionUpdate()) {
        setEnableVersionUpdate(other.enableVersionUpdate);
      }
      if (other.hasEnableDesignDataBundleVersionUpdate()) {
        setEnableDesignDataBundleVersionUpdate(other.enableDesignDataBundleVersionUpdate);
      }
      if (other.hasEventTrackingOpen()) {
        setEventTrackingOpen(other.eventTrackingOpen);
      }
      if (other.hasEnableAndroidMiddlePackage()) {
        setEnableAndroidMiddlePackage(other.enableAndroidMiddlePackage);
      }
      if (other.hasEnableWatermark()) {
        setEnableWatermark(other.enableWatermark);
      }
      if (other.hasCloseRedeemCode()) {
        setCloseRedeemCode(other.closeRedeemCode);
      }
      if (other.hasNetworkDiagnostic()) {
        setNetworkDiagnostic(other.networkDiagnostic);
      }
      if (other.hasAssetBundleUrl()) {
        getMutableAssetBundleUrlBytes().copyFrom(other.assetBundleUrl);
      }
      if (other.hasIp()) {
        getMutableIpBytes().copyFrom(other.ip);
      }
      if (other.hasRegionName()) {
        getMutableRegionNameBytes().copyFrom(other.regionName);
      }
      if (other.hasLuaUrl()) {
        getMutableLuaUrlBytes().copyFrom(other.luaUrl);
      }
      if (other.hasExResourceUrl()) {
        getMutableExResourceUrlBytes().copyFrom(other.exResourceUrl);
      }
      if (other.hasMdkResVersion()) {
        getMutableMdkResVersionBytes().copyFrom(other.mdkResVersion);
      }
      if (other.hasIfixUrl()) {
        getMutableIfixUrlBytes().copyFrom(other.ifixUrl);
      }
      if (other.hasMsg()) {
        getMutableMsgBytes().copyFrom(other.msg);
      }
      if (other.hasIfixVersion()) {
        getMutableIfixVersionBytes().copyFrom(other.ifixVersion);
      }
      if (other.hasClientSecretKey()) {
        getMutableClientSecretKeyBytes().copyFrom(other.clientSecretKey);
      }
      return this;
    }

    @Override
    public Gateserver clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      port = 0;
      enableVersionUpdate = false;
      enableDesignDataBundleVersionUpdate = false;
      eventTrackingOpen = false;
      enableAndroidMiddlePackage = false;
      enableWatermark = false;
      closeRedeemCode = false;
      networkDiagnostic = false;
      assetBundleUrl.clear();
      ip.clear();
      regionName.clear();
      luaUrl.clear();
      exResourceUrl.clear();
      mdkResVersion.clear();
      ifixUrl.clear();
      msg.clear();
      ifixVersion.clear();
      clientSecretKey.clear();
      return this;
    }

    @Override
    public Gateserver clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      assetBundleUrl.clear();
      ip.clear();
      regionName.clear();
      luaUrl.clear();
      exResourceUrl.clear();
      mdkResVersion.clear();
      ifixUrl.clear();
      msg.clear();
      ifixVersion.clear();
      clientSecretKey.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof Gateserver)) {
        return false;
      }
      Gateserver other = (Gateserver) o;
      return bitField0_ == other.bitField0_
        && (!hasPort() || port == other.port)
        && (!hasEnableVersionUpdate() || enableVersionUpdate == other.enableVersionUpdate)
        && (!hasEnableDesignDataBundleVersionUpdate() || enableDesignDataBundleVersionUpdate == other.enableDesignDataBundleVersionUpdate)
        && (!hasEventTrackingOpen() || eventTrackingOpen == other.eventTrackingOpen)
        && (!hasEnableAndroidMiddlePackage() || enableAndroidMiddlePackage == other.enableAndroidMiddlePackage)
        && (!hasEnableWatermark() || enableWatermark == other.enableWatermark)
        && (!hasCloseRedeemCode() || closeRedeemCode == other.closeRedeemCode)
        && (!hasNetworkDiagnostic() || networkDiagnostic == other.networkDiagnostic)
        && (!hasAssetBundleUrl() || assetBundleUrl.equals(other.assetBundleUrl))
        && (!hasIp() || ip.equals(other.ip))
        && (!hasRegionName() || regionName.equals(other.regionName))
        && (!hasLuaUrl() || luaUrl.equals(other.luaUrl))
        && (!hasExResourceUrl() || exResourceUrl.equals(other.exResourceUrl))
        && (!hasMdkResVersion() || mdkResVersion.equals(other.mdkResVersion))
        && (!hasIfixUrl() || ifixUrl.equals(other.ifixUrl))
        && (!hasMsg() || msg.equals(other.msg))
        && (!hasIfixVersion() || ifixVersion.equals(other.ifixVersion))
        && (!hasClientSecretKey() || clientSecretKey.equals(other.clientSecretKey));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(port);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 8);
        output.writeBoolNoTag(enableVersionUpdate);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(enableDesignDataBundleVersionUpdate);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawLittleEndian16((short) 6640);
        output.writeBoolNoTag(eventTrackingOpen);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawLittleEndian16((short) 9608);
        output.writeBoolNoTag(enableAndroidMiddlePackage);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawLittleEndian16((short) 23432);
        output.writeBoolNoTag(enableWatermark);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawLittleEndian16((short) 23792);
        output.writeBoolNoTag(closeRedeemCode);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawLittleEndian16((short) 25072);
        output.writeBoolNoTag(networkDiagnostic);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 26);
        output.writeStringNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawByte((byte) 34);
        output.writeStringNoTag(ip);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawByte((byte) 42);
        output.writeStringNoTag(regionName);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawByte((byte) 82);
        output.writeStringNoTag(luaUrl);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawByte((byte) 114);
        output.writeStringNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRawLittleEndian16((short) 10666);
        output.writeStringNoTag(mdkResVersion);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRawLittleEndian16((short) 17866);
        output.writeStringNoTag(ifixUrl);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeRawLittleEndian16((short) 19138);
        output.writeStringNoTag(msg);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeRawLittleEndian16((short) 22962);
        output.writeStringNoTag(ifixVersion);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeRawLittleEndian16((short) 29058);
        output.writeStringNoTag(clientSecretKey);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(port);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(assetBundleUrl);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(ip);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(regionName);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(luaUrl);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(exResourceUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(mdkResVersion);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ifixUrl);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(msg);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(ifixVersion);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        size += 2 + ProtoSink.computeStringSizeNoTag(clientSecretKey);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Gateserver mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // port
            port = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // enableVersionUpdate
            enableVersionUpdate = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // enableDesignDataBundleVersionUpdate
            enableDesignDataBundleVersionUpdate = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 3312) {
              break;
            }
          }
          case 3312: {
            // eventTrackingOpen
            eventTrackingOpen = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 4744) {
              break;
            }
          }
          case 4744: {
            // enableAndroidMiddlePackage
            enableAndroidMiddlePackage = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 11656) {
              break;
            }
          }
          case 11656: {
            // enableWatermark
            enableWatermark = input.readBool();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 11888) {
              break;
            }
          }
          case 11888: {
            // closeRedeemCode
            closeRedeemCode = input.readBool();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 12528) {
              break;
            }
          }
          case 12528: {
            // networkDiagnostic
            networkDiagnostic = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // assetBundleUrl
            input.readString(assetBundleUrl);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // ip
            input.readString(ip);
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // regionName
            input.readString(regionName);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // luaUrl
            input.readString(luaUrl);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // exResourceUrl
            input.readString(exResourceUrl);
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 5290) {
              break;
            }
          }
          case 5290: {
            // mdkResVersion
            input.readString(mdkResVersion);
            bitField0_ |= 0x00002000;
            tag = input.readTag();
            if (tag != 8906) {
              break;
            }
          }
          case 8906: {
            // ifixUrl
            input.readString(ifixUrl);
            bitField0_ |= 0x00004000;
            tag = input.readTag();
            if (tag != 9538) {
              break;
            }
          }
          case 9538: {
            // msg
            input.readString(msg);
            bitField0_ |= 0x00008000;
            tag = input.readTag();
            if (tag != 11442) {
              break;
            }
          }
          case 11442: {
            // ifixVersion
            input.readString(ifixVersion);
            bitField0_ |= 0x00010000;
            tag = input.readTag();
            if (tag != 14466) {
              break;
            }
          }
          case 14466: {
            // clientSecretKey
            input.readString(clientSecretKey);
            bitField0_ |= 0x00020000;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.port, port);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.enableVersionUpdate, enableVersionUpdate);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.enableDesignDataBundleVersionUpdate, enableDesignDataBundleVersionUpdate);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.eventTrackingOpen, eventTrackingOpen);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.enableAndroidMiddlePackage, enableAndroidMiddlePackage);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeBool(FieldNames.enableWatermark, enableWatermark);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeBool(FieldNames.closeRedeemCode, closeRedeemCode);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.networkDiagnostic, networkDiagnostic);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeString(FieldNames.assetBundleUrl, assetBundleUrl);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeString(FieldNames.ip, ip);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeString(FieldNames.regionName, regionName);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeString(FieldNames.luaUrl, luaUrl);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeString(FieldNames.exResourceUrl, exResourceUrl);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeString(FieldNames.mdkResVersion, mdkResVersion);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeString(FieldNames.ifixUrl, ifixUrl);
      }
      if ((bitField0_ & 0x00008000) != 0) {
        output.writeString(FieldNames.msg, msg);
      }
      if ((bitField0_ & 0x00010000) != 0) {
        output.writeString(FieldNames.ifixVersion, ifixVersion);
      }
      if ((bitField0_ & 0x00020000) != 0) {
        output.writeString(FieldNames.clientSecretKey, clientSecretKey);
      }
      output.endObject();
    }

    @Override
    public Gateserver mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3446913: {
            if (input.isAtField(FieldNames.port)) {
              if (!input.trySkipNullValue()) {
                port = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -349989122:
          case 531540044: {
            if (input.isAtField(FieldNames.enableVersionUpdate)) {
              if (!input.trySkipNullValue()) {
                enableVersionUpdate = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -467618828:
          case -1343541251: {
            if (input.isAtField(FieldNames.enableDesignDataBundleVersionUpdate)) {
              if (!input.trySkipNullValue()) {
                enableDesignDataBundleVersionUpdate = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -100911781:
          case 1870727661: {
            if (input.isAtField(FieldNames.eventTrackingOpen)) {
              if (!input.trySkipNullValue()) {
                eventTrackingOpen = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 583307493:
          case 986526120: {
            if (input.isAtField(FieldNames.enableAndroidMiddlePackage)) {
              if (!input.trySkipNullValue()) {
                enableAndroidMiddlePackage = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1857218081:
          case 364560552: {
            if (input.isAtField(FieldNames.enableWatermark)) {
              if (!input.trySkipNullValue()) {
                enableWatermark = input.readBool();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1962061375:
          case -264284439: {
            if (input.isAtField(FieldNames.closeRedeemCode)) {
              if (!input.trySkipNullValue()) {
                closeRedeemCode = input.readBool();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1960857483:
          case -2044113320: {
            if (input.isAtField(FieldNames.networkDiagnostic)) {
              if (!input.trySkipNullValue()) {
                networkDiagnostic = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1116358531:
          case 1973569761: {
            if (input.isAtField(FieldNames.assetBundleUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(assetBundleUrl);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3367: {
            if (input.isAtField(FieldNames.ip)) {
              if (!input.trySkipNullValue()) {
                input.readString(ip);
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1990689889:
          case -1565768458: {
            if (input.isAtField(FieldNames.regionName)) {
              if (!input.trySkipNullValue()) {
                input.readString(regionName);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1091991977:
          case 508288168: {
            if (input.isAtField(FieldNames.luaUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(luaUrl);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1643520974:
          case -1086137910: {
            if (input.isAtField(FieldNames.exResourceUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(exResourceUrl);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1415579412:
          case -204279250: {
            if (input.isAtField(FieldNames.mdkResVersion)) {
              if (!input.trySkipNullValue()) {
                input.readString(mdkResVersion);
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1719409347:
          case 1762383292: {
            if (input.isAtField(FieldNames.ifixUrl)) {
              if (!input.trySkipNullValue()) {
                input.readString(ifixUrl);
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 108417: {
            if (input.isAtField(FieldNames.msg)) {
              if (!input.trySkipNullValue()) {
                input.readString(msg);
                bitField0_ |= 0x00008000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1625073708:
          case -827048283: {
            if (input.isAtField(FieldNames.ifixVersion)) {
              if (!input.trySkipNullValue()) {
                input.readString(ifixVersion);
                bitField0_ |= 0x00010000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -584558076:
          case 904194372: {
            if (input.isAtField(FieldNames.clientSecretKey)) {
              if (!input.trySkipNullValue()) {
                input.readString(clientSecretKey);
                bitField0_ |= 0x00020000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public Gateserver clone() {
      return new Gateserver().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static Gateserver parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new Gateserver(), data).checkInitialized();
    }

    public static Gateserver parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    public static Gateserver parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Gateserver(), input).checkInitialized();
    }

    /**
     * @return factory for creating Gateserver messages
     */
    public static MessageFactory<Gateserver> getFactory() {
      return GateserverFactory.INSTANCE;
    }

    private enum GateserverFactory implements MessageFactory<Gateserver> {
      INSTANCE;

      @Override
      public Gateserver create() {
        return Gateserver.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName port = FieldName.forField("port");

      static final FieldName enableVersionUpdate = FieldName.forField("enableVersionUpdate", "enable_version_update");

      static final FieldName enableDesignDataBundleVersionUpdate = FieldName.forField("enableDesignDataBundleVersionUpdate", "enable_design_data_bundle_version_update");

      static final FieldName eventTrackingOpen = FieldName.forField("eventTrackingOpen", "event_tracking_open");

      static final FieldName enableAndroidMiddlePackage = FieldName.forField("enableAndroidMiddlePackage", "enable_android_middle_package");

      static final FieldName enableWatermark = FieldName.forField("enableWatermark", "enable_watermark");

      static final FieldName closeRedeemCode = FieldName.forField("closeRedeemCode", "close_redeem_code");

      static final FieldName networkDiagnostic = FieldName.forField("networkDiagnostic", "network_diagnostic");

      static final FieldName assetBundleUrl = FieldName.forField("assetBundleUrl", "asset_bundle_url");

      static final FieldName ip = FieldName.forField("ip");

      static final FieldName regionName = FieldName.forField("regionName", "region_name");

      static final FieldName luaUrl = FieldName.forField("luaUrl", "lua_url");

      static final FieldName exResourceUrl = FieldName.forField("exResourceUrl", "ex_resource_url");

      static final FieldName mdkResVersion = FieldName.forField("mdkResVersion", "mdk_res_version");

      static final FieldName ifixUrl = FieldName.forField("ifixUrl", "ifix_url");

      static final FieldName msg = FieldName.forField("msg");

      static final FieldName ifixVersion = FieldName.forField("ifixVersion", "ifix_version");

      static final FieldName clientSecretKey = FieldName.forField("clientSecretKey", "client_secret_key");
    }
  }
}
